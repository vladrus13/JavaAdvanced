    private void addRecursive(String url, int depth, Set<String> downloaded, Map<String, IOException> errors, Set<String> viewed, Phaser phaser) {
        try {
            String host = URLUtils.getHost(url);
            Host data = hostMap.computeIfAbsent(host, element -> new Host(perHost, downloaderPool));
            phaser.register();
            data.add(() -> {
                try {
                    Document document = downloader.download(url);
                    downloaded.add(url);
                    if (depth - 1 > 0) {
                        phaser.register();
                        extractorPool.submit(() -> {
                            try {
                                document.extractLinks().parallelStream().filter(element -> !viewed.contains(element)).filter(viewed::add).forEach(element -> addRecursive(element, depth - 1, downloaded, errors, viewed, phaser));
                            } catch (IOException e) {
                                // ignored
                            } finally {
                                phaser.arrive();
                            }
                        });
                    }
                } catch (IOException e) {
                    errors.put(url, e);
                } finally {
                    phaser.arrive();
                    data.next();
                }
            });
        } catch (MalformedURLException e) {
            errors.put(url, e);
        }
    }
